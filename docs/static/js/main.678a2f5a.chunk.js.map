{"version":3,"sources":["logo.svg","config.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","alert","useAlert","Firebase","apps","length","initializeApp","config","className","src","logo","alt","placeholder","id","type","value","onClick","data","name","document","getElementById","email","link","test","database","ref","split","set","then","show","error","Boolean","window","location","hostname","match","options","position","positions","BOTTOM_CENTER","timeout","offset","transition","transitions","FADE","ReactDOM","render","template","AlertTemplate","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,kC,0NCY1BC,EAZM,CACnBC,OAAQ,0CACRC,WAAY,+BACZC,YAAa,sCACbC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,gBCwCJC,EAxCH,WACV,IAAIC,EAAQC,cAMZ,OAJKC,IAASC,KAAKC,QACjBF,IAASG,cAAcC,GAIvB,yBAAKC,UAAU,OACX,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,uBAAGH,UAAU,SAAb,4BACA,8BACE,2BAAOA,UAAU,cAAcI,YAAY,OAAOC,GAAG,SADvD,IACgE,6BAC9D,2BAAOL,UAAU,cAAcI,YAAY,QAAQC,GAAG,UAFxD,IAEkE,6BAChE,2BAAOL,UAAU,cAAcI,YAAY,6CAA6CC,GAAG,SAH7F,IAGsG,6BACpG,2BAAOC,KAAK,SAASN,UAAU,cAAcO,MAAM,wBAAwBC,QAAS,WAClF,IAAMC,EAAO,CACXC,KAAMC,SAASC,eAAe,QAAQL,MACtCM,MAAOF,SAASC,eAAe,SAASL,MACxCO,KAAMH,SAASC,eAAe,QAAQL,OAGpC,gDAAgDQ,KAAKN,EAAKI,QACnC,IAAtBJ,EAAKI,MAAMhB,QACU,IAArBY,EAAKC,KAAKb,QACW,IAArBY,EAAKK,KAAKjB,OACbF,IAASqB,WAAWC,IAAI,uBAAyBR,EAAKI,MAAMK,MAAM,KAAK,IAAIC,IAAIV,GAC9EW,MAAK,SAACb,GACLd,EAAM4B,KAAK,mEACV,SAACd,GACFd,EAAM6B,MAAM,8CAGZ7B,EAAM6B,MAAM,0CC7BRC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVN,IAAMC,EAAU,CACdC,SAAUC,IAAUC,cACpBC,QAAS,EACTC,OAAQ,OACR3B,KAAM,UACN4B,WAAYC,IAAYC,MAG1BC,IAASC,OAEP,kBAAC,IAAD,eAAeC,SAAUC,KAAmBZ,GAC1C,kBAAC,EAAD,CAAK5B,UAAU,SAGjBW,SAASC,eAAe,SD6GpB,kBAAmB6B,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAxB,GACLyB,QAAQzB,MAAMA,EAAM0B,c","file":"static/js/main.678a2f5a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.7671e971.svg\";","const firebaseConfig = {\r\n    apiKey: \"AIzaSyApPqV50wqW_pxUrqqHl4ZB-0O-a1BoTFY\",\r\n    authDomain: \"hackslash-17.firebaseapp.com\",\r\n    databaseURL: \"https://hackslash-17.firebaseio.com\",\r\n    projectId: \"hackslash-17\",\r\n    storageBucket: \"hackslash-17.appspot.com\",\r\n    messagingSenderId: \"981722954585\",\r\n    appId: \"1:981722954585:web:65881d51b3746c4ec86a48\",\r\n    measurementId: \"G-V77MPSN2KJ\"\r\n  };\r\n\r\n\r\n  export default firebaseConfig;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Firebase from 'firebase';\nimport { useAlert } from 'react-alert'\nimport config from './config';\n\n\nconst App = () => {\n  var alert = useAlert();\n\n  if (!Firebase.apps.length){\n    Firebase.initializeApp(config);\n  }\n\n  return (\n    <div className=\"App\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p className=\"Title\">Join HackSlash on Slack!</p>\n        <form>\n          <input className=\"input-field\" placeholder=\"Name\" id=\"name\"/> <br></br>\n          <input className=\"input-field\" placeholder=\"Email\" id=\"email\"/> <br></br>\n          <input className=\"input-field\" placeholder=\"Link to a merged PR in HackSlash on GitHub\" id=\"link\"/> <br></br>\n          <input type='button' className=\"send-button\" value='Request an invitation' onClick={() => {\n            const data = {\n              name: document.getElementById(\"name\").value,\n              email: document.getElementById(\"email\").value,\n              link: document.getElementById(\"link\").value\n            }\n\n            if (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(data.email) \n              && data.email.length !== 0 \n              && data.name.length !== 0\n              && data.link.length !== 0)\n              Firebase.database().ref('/slack-applications/' + data.email.split('.')[0]).set(data)\n              .then((value) => {\n                alert.show('Request saved! You will receive an invite if it is approved!');\n              }, (value) => {\n                alert.error('Something went wrong, please try again!');\n              });\n              else {\n                alert.error('Please fill all fields correctly');\n              }\n          }}/> \n        </form>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { transitions, positions, Provider as AlertProvider } from 'react-alert'\nimport AlertTemplate from 'react-alert-template-basic'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst options = {\n  position: positions.BOTTOM_CENTER,\n  timeout: 0,\n  offset: '32px',\n  type: 'success',\n  transition: transitions.FADE\n}\n\nReactDOM.render(\n  // <React.StrictMode>\n  <AlertProvider template={AlertTemplate} {...options}>\n    <App className='App'/>\n    </AlertProvider>,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}