{"version":3,"sources":["logo.svg","config.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","alert","useAlert","Firebase","apps","length","initializeApp","config","className","src","logo","alt","placeholder","id","type","value","onClick","data","name","document","getElementById","email","link","test","database","ref","split","set","then","show","error","Boolean","window","location","hostname","match","options","position","positions","BOTTOM_CENTER","timeout","offset","transition","transitions","FADE","ReactDOM","render","template","AlertTemplate","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,kC,0NCY1BC,EAZM,CACnBC,OAAQ,0CACRC,WAAY,+BACZC,YAAa,sCACbC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,gBCwCJC,EAxCH,WACV,IAAIC,EAAQC,cAMZ,OAJKC,IAASC,KAAKC,QACjBF,IAASG,cAAcC,GAIvB,yBAAKC,UAAU,OACX,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,uBAAGH,UAAU,SAAb,4BACA,8BACE,2BAAOA,UAAU,cAAcI,YAAY,OAAOC,GAAG,SADvD,IACgE,6BAC9D,2BAAOL,UAAU,cAAcI,YAAY,QAAQC,GAAG,UAFxD,IAEkE,6BAChE,2BAAOL,UAAU,cAAcI,YAAY,6CAA6CC,GAAG,SAH7F,IAGsG,6BACpG,2BAAOC,KAAK,SAASN,UAAU,cAAcO,MAAM,wBAAwBC,QAAS,WAClF,IAAMC,EAAO,CACXC,KAAMC,SAASC,eAAe,QAAQL,MACtCM,MAAOF,SAASC,eAAe,SAASL,MACxCO,KAAMH,SAASC,eAAe,QAAQL,OAGpC,gDAAgDQ,KAAKN,EAAKI,QACnC,IAAtBJ,EAAKI,MAAMhB,QACU,IAArBY,EAAKC,KAAKb,QACW,IAArBY,EAAKK,KAAKjB,OACbF,IAASqB,WAAWC,IAAI,uBAAyBR,EAAKI,MAAMK,MAAM,KAAK,IAAIC,IAAIV,GAC9EW,MAAK,SAACb,GACLd,EAAM4B,KAAK,mEACV,SAACd,GACFd,EAAM6B,MAAM,8CAGZ7B,EAAM6B,MAAM,0CC7BRC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVN,IAAMC,EAAU,CACdC,SAAUC,IAAUC,cACpBC,QAAS,EACTC,OAAQ,OACR3B,KAAM,UACN4B,WAAYC,IAAYC,MAG1BC,IAASC,OAEP,kBAAC,IAAD,eAAeC,SAAUC,KAAmBZ,GAC1C,kBAAC,EAAD,CAAK5B,UAAU,SAGjBW,SAASC,eAAe,SD6GpB,kBAAmB6B,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAxB,GACLyB,QAAQzB,MAAMA,EAAM0B,c","file":"static/js/main.c70763a4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.2cac3a49.svg\";","const firebaseConfig = {\r\n    apiKey: \"AIzaSyApPqV50wqW_pxUrqqHl4ZB-0O-a1BoTFY\",\r\n    authDomain: \"hackslash-17.firebaseapp.com\",\r\n    databaseURL: \"https://hackslash-17.firebaseio.com\",\r\n    projectId: \"hackslash-17\",\r\n    storageBucket: \"hackslash-17.appspot.com\",\r\n    messagingSenderId: \"981722954585\",\r\n    appId: \"1:981722954585:web:65881d51b3746c4ec86a48\",\r\n    measurementId: \"G-V77MPSN2KJ\"\r\n  };\r\n\r\n\r\n  export default firebaseConfig;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Firebase from 'firebase';\r\nimport { useAlert } from 'react-alert'\r\nimport config from './config';\r\n\r\n\r\nconst App = () => {\r\n  var alert = useAlert();\r\n\r\n  if (!Firebase.apps.length){\r\n    Firebase.initializeApp(config);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p className=\"Title\">Join HackSlash on Slack!</p>\r\n        <form>\r\n          <input className=\"input-field\" placeholder=\"Name\" id=\"name\"/> <br></br>\r\n          <input className=\"input-field\" placeholder=\"Email\" id=\"email\"/> <br></br>\r\n          <input className=\"input-field\" placeholder=\"Link to a merged PR in HackSlash on GitHub\" id=\"link\"/> <br></br>\r\n          <input type='button' className=\"send-button\" value='Request an invitation' onClick={() => {\r\n            const data = {\r\n              name: document.getElementById(\"name\").value,\r\n              email: document.getElementById(\"email\").value,\r\n              link: document.getElementById(\"link\").value\r\n            }\r\n\r\n            if (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(data.email) \r\n              && data.email.length !== 0 \r\n              && data.name.length !== 0\r\n              && data.link.length !== 0)\r\n              Firebase.database().ref('/slack-applications/' + data.email.split('.')[0]).set(data)\r\n              .then((value) => {\r\n                alert.show('Request saved! You will receive an invite if it is approved!');\r\n              }, (value) => {\r\n                alert.error('Something went wrong, please try again!');\r\n              });\r\n              else {\r\n                alert.error('Please fill all fields correctly');\r\n              }\r\n          }}/> \r\n        </form>\r\n    </div>\r\n  );\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { transitions, positions, Provider as AlertProvider } from 'react-alert'\r\nimport AlertTemplate from 'react-alert-template-basic'\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst options = {\r\n  position: positions.BOTTOM_CENTER,\r\n  timeout: 0,\r\n  offset: '32px',\r\n  type: 'success',\r\n  transition: transitions.FADE\r\n}\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n  <AlertProvider template={AlertTemplate} {...options}>\r\n    <App className='App'/>\r\n    </AlertProvider>,\r\n  // </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}